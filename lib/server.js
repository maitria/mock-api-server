// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cache$, express, HELP_MESSAGE, loadFiles, lumber, mockApiServer, parseJsonFiles, pick, Responder, ResponseSpecification, Server;
  express = require('express');
  loadFiles = require('./load_files');
  parseJsonFiles = require('./parse_json_files');
  lumber = require('clumber');
  mockApiServer = require('./index');
  pick = require('underscore').pick;
  cache$ = require('./responder');
  Responder = cache$.Responder;
  ResponseSpecification = cache$.ResponseSpecification;
  HELP_MESSAGE = 'mock-api-server: A stand-in for a real API server\nUsage:\n\n  mock-api-server --port PORT\n\nOptions:\n\n  --port PORT           The port to listen on (required).\n  --test-path PATH      Path to the static test resources.\n';
  Server = function () {
    function Server(param$) {
      var instance$;
      instance$ = this;
      this._cannedResponses = function (a, b, c) {
        return Server.prototype._cannedResponses.apply(instance$, arguments);
      };
      this._addResponse = function (a, b) {
        return Server.prototype._addResponse.apply(instance$, arguments);
      };
      this._reset = function (a, b) {
        return Server.prototype._reset.apply(instance$, arguments);
      };
      this._stop = function (a, b) {
        return Server.prototype._stop.apply(instance$, arguments);
      };
      this.argv = param$;
    }
    Server.prototype.run = function () {
      var help;
      help = false;
      this.options = {
        logToConsole: true,
        testPath: 'test/mock-api'
      };
      while (this.argv.length > 0) {
        if ('--help' === this.argv[0]) {
          help = true;
          this.argv.shift();
        } else if ('--port' === this.argv[0]) {
          this.argv.shift();
          this.options.port = this.argv.shift() | 0;
        } else if ('--test-path' === this.argv[0]) {
          this.argv.shift();
          this.options.testPath = this.argv.shift() | 'test/mock-api';
        } else if ('--no-log-to-console' === this.argv[0]) {
          this.argv.shift();
          this.options.logToConsole = false;
        } else if ('--log-to-file' === this.argv[0]) {
          this.argv.shift();
          this.options.logToFile = this.argv.shift();
        } else {
          console.log('Unknown option `' + this.argv[0] + '` (use --help).');
          process.exit(1);
        }
      }
      if (help) {
        console.log(HELP_MESSAGE);
        process.exit(0);
      }
      if (!this.options.port) {
        console.log('mock-api-server: No PORT supplied (see --help).');
        process.exit(1);
      }
      return this.start(function (err, server) {
      });
    };
    Server.prototype.start = function (done) {
      this.logger = this._initLogger();
      this.logger.info('[STARTING-SERVER]');
      this.app = express();
      this.app.use(express.json());
      this.app.use(this._cannedResponses);
      this.app.get('/mock-api/stop', this._stop);
      this.app.get('/mock-api/reset', this._reset);
      this.app.post('/mock-api/add-response', this._addResponse);
      return loadFiles(this.options.testPath, function (this$) {
        return function (err, fileHash) {
          this$.originalResponder = this$.responder = new Responder(parseJsonFiles(fileHash));
          return this$.server = this$.app.listen(this$.options.port, done);
        };
      }(this));
    };
    Server.prototype._stop = function (req, res) {
      var die;
      this.logger.info('[STOPPING-SERVER]');
      die = function (this$) {
        return function () {
          this$.server.close();
          return process.exit(0);
        };
      }(this);
      setTimeout(die, 50);
      return res.send('OK');
    };
    Server.prototype._reset = function (req, res) {
      this.responder = this.originalResponder;
      return res.send('OK');
    };
    Server.prototype._addResponse = function (req, res) {
      var spec;
      spec = new ResponseSpecification(req.body);
      this.responder = this.responder.withResponseSpecification(spec);
      return res.send('OK');
    };
    Server.prototype._initLogger = function () {
      var transports;
      transports = [];
      if (this.options.logToConsole)
        transports.push(new lumber.transports.Console);
      if (null != this.options.logToFile)
        transports.push(new lumber.transports.File({
          filename: this.options.logToFile,
          level: 'info'
        }));
      return new lumber.Logger({ transports: transports });
    };
    Server.prototype._cannedResponses = function (req, res, next) {
      var request, response;
      request = pick(req, 'method', 'path', 'query');
      this.logger.info('[MOCK-REQUEST]', request);
      response = this.responder.respondTo(request);
      if (response === void 0)
        return next();
      this.logger.info('[MOCK-RESPONSE]', response.body);
      res.header('Content-Type', 'application/json');
      res.status(response.statusCode);
      return res.send(JSON.stringify(response.body));
    };
    return Server;
  }();
  module.exports = Server;
}.call(this);
