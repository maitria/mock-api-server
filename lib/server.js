// Generated by CoffeeScript 1.12.2
'use strict';
var HELP_MESSAGE, Responder, ResponseSpecification, Server, express, loadFiles, lumber, mockApiServer, parseJsonFiles, pick, ref,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

express = require('express');

loadFiles = require('./load_files');

parseJsonFiles = require('./parse_json_files');

lumber = require('clumber');

mockApiServer = require('./index');

pick = require('underscore').pick;

ref = require('./responder'), Responder = ref.Responder, ResponseSpecification = ref.ResponseSpecification;

HELP_MESSAGE = 'mock-api-server: A stand-in for a real API server Usage: mock-api-server --port PORT Options: --port PORT           The port to listen on (required). --test-path PATH      Path to the static test resources.';

Server = (function() {
  function Server(argv) {
    this.argv = argv;
    this._cannedResponses = bind(this._cannedResponses, this);
    this._addResponse = bind(this._addResponse, this);
    this._reset = bind(this._reset, this);
    this._stop = bind(this._stop, this);
  }

  Server.prototype.run = function() {
    var help;
    help = false;
    this.options = {
      logToConsole: true,
      testPath: 'test/mock-api'
    };
    while (this.argv.length > 0) {
      if ('--help' === this.argv[0]) {
        help = true;
        this.argv.shift();
      } else if ('--port' === this.argv[0]) {
        this.argv.shift();
        this.options.port = this.argv.shift() | 0;
      } else if ('--test-path' === this.argv[0]) {
        this.argv.shift();
        this.options.testPath = this.argv.shift();
      } else if ('--no-log-to-console' === this.argv[0]) {
        this.argv.shift();
        this.options.logToConsole = false;
      } else if ('--log-to-file' === this.argv[0]) {
        this.argv.shift();
        this.options.logToFile = this.argv.shift();
      } else {
        console.log('Unknown option `' + this.argv[0] + '` (use --help).');
        process.exit(1);
      }
    }
    if (help) {
      console.log(HELP_MESSAGE);
      process.exit(0);
    }
    if (!this.options.port) {
      console.log('mock-api-server: No PORT supplied (see --help).');
      process.exit(1);
    }
    return this.start(function(err, server) {});
  };

  Server.prototype.start = function(done) {
    this.logger = this._initLogger();
    this.logger.info('[STARTING-SERVER]');
    this.app = express();
    this.app.use(express.json());
    this.app.use(this._cannedResponses);
    this.app.get('/mock-api/stop', this._stop);
    this.app.get('/mock-api/reset', this._reset);
    this.app.post('/mock-api/add-response', this._addResponse);
    return loadFiles(this.options.testPath, (function(_this) {
      return function(err, fileHash) {
        _this.originalResponder = _this.responder = new Responder(parseJsonFiles(fileHash));
        return _this.server = _this.app.listen(_this.options.port, done);
      };
    })(this));
  };

  Server.prototype._stop = function(req, res) {
    var die;
    this.logger.info('[STOPPING-SERVER]');
    die = (function(_this) {
      return function() {
        _this.server.close();
        return process.exit(0);
      };
    })(this);
    setTimeout(die, 50);
    return res.send('OK');
  };

  Server.prototype._reset = function(req, res) {
    this.responder = this.originalResponder;
    return res.send('OK');
  };

  Server.prototype._addResponse = function(req, res) {
    var spec;
    spec = new ResponseSpecification(req.body);
    this.responder = this.responder.withResponseSpecification(spec);
    return res.send('OK');
  };

  Server.prototype._initLogger = function() {
    var transports;
    transports = [];
    if (this.options.logToConsole) {
      transports.push(new lumber.transports.Console);
    }
    if (this.options.logToFile != null) {
      transports.push(new lumber.transports.File({
        filename: this.options.logToFile,
        level: 'info'
      }));
    }
    return new lumber.Logger({
      transports: transports
    });
  };

  Server.prototype._cannedResponses = function(req, res, next) {
    var request, response;
    request = pick(req, 'method', 'path', 'query');
    this.logger.info('[MOCK-REQUEST]', request);
    response = this.responder.respondTo(request);
    if (response === void 0) {
      return next();
    }
    this.logger.info('[MOCK-RESPONSE]', response.body);
    res.set(response.headers);
    res.status(response.statusCode);
    return res.send(JSON.stringify(response.body));
  };

  return Server;

})();

module.exports = Server;
