// Generated by CoffeeScript 1.12.2
'use strict';
var Dsl, ResponseSpecification, isObject;

isObject = require('underscore').isObject;

ResponseSpecification = require('./responder').ResponseSpecification;

Dsl = (function() {
  function Dsl(_addResponseSpecification, arg) {
    var requestInfo;
    this._addResponseSpecification = _addResponseSpecification;
    requestInfo = arg[0];
    this._withMode = 'replaceContent';
    if (isObject(requestInfo)) {
      this._path = requestInfo.path;
      this._query = requestInfo.query;
    } else {
      this._path = requestInfo;
      this._query = {};
    }
  }

  Dsl.prototype.byReplacing = function(key) {
    this._withMode = 'replaceKey';
    this._key = key;
    return this;
  };

  Dsl.prototype["with"] = function(what) {
    var body, headers, method, spec, statusCode;
    if (isObject(what)) {
      body = what.body;
      statusCode = what.statusCode || 200;
      method = what.method || 'GET';
      headers = what.headers || {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      };
    } else {
      body = what;
      statusCode = 200;
      method = 'GET';
      headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      };
    }
    spec = (function() {
      switch (this._withMode) {
        case 'replaceContent':
          return {
            path: this._path,
            method: method,
            query: this._query,
            body: body,
            statusCode: statusCode,
            headers: headers
          };
        case 'replaceKey':
          return {
            path: this._path,
            method: method,
            query: this._query,
            replaceKey: this._key,
            replaceValue: what
          };
      }
    }).call(this);
    return this._addResponseSpecification(spec);
  };

  return Dsl;

})();

module.exports = Dsl;
